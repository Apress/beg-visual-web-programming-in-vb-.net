'------------------------------------------------------------------------------
' <autogenerated>
'     This code was generated by a tool.
'     Runtime Version: 1.1.4322.573
'
'     Changes to this file may cause incorrect behavior and will be lost if 
'     the code is regenerated.
' </autogenerated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.Data
Imports System.Runtime.Serialization
Imports System.Xml


<Serializable(),  _
 System.ComponentModel.DesignerCategoryAttribute("code"),  _
 System.Diagnostics.DebuggerStepThrough(),  _
 System.ComponentModel.ToolboxItem(true)>  _
Public Class UserData
    Inherits DataSet
    
    Private tableUser As UserDataTable
    
    Public Sub New()
        MyBase.New
        Me.InitClass
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    Protected Sub New(ByVal info As SerializationInfo, ByVal context As StreamingContext)
        MyBase.New
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(System.String)),String)
        If (Not (strSchema) Is Nothing) Then
            Dim ds As DataSet = New DataSet
            ds.ReadXmlSchema(New XmlTextReader(New System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("User")) Is Nothing) Then
                Me.Tables.Add(New UserDataTable(ds.Tables("User")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.InitClass
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler Me.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <System.ComponentModel.Browsable(false),  _
     System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property User As UserDataTable
        Get
            Return Me.tableUser
        End Get
    End Property
    
    Public Overrides Function Clone() As DataSet
        Dim cln As UserData = CType(MyBase.Clone,UserData)
        cln.InitVars
        Return cln
    End Function
    
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As XmlReader)
        Me.Reset
        Dim ds As DataSet = New DataSet
        ds.ReadXml(reader)
        If (Not (ds.Tables("User")) Is Nothing) Then
            Me.Tables.Add(New UserDataTable(ds.Tables("User")))
        End If
        Me.DataSetName = ds.DataSetName
        Me.Prefix = ds.Prefix
        Me.Namespace = ds.Namespace
        Me.Locale = ds.Locale
        Me.CaseSensitive = ds.CaseSensitive
        Me.EnforceConstraints = ds.EnforceConstraints
        Me.Merge(ds, false, System.Data.MissingSchemaAction.Add)
        Me.InitVars
    End Sub
    
    Protected Overrides Function GetSchemaSerializable() As System.Xml.Schema.XmlSchema
        Dim stream As System.IO.MemoryStream = New System.IO.MemoryStream
        Me.WriteXmlSchema(New XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return System.Xml.Schema.XmlSchema.Read(New XmlTextReader(stream), Nothing)
    End Function
    
    Friend Sub InitVars()
        Me.tableUser = CType(Me.Tables("User"),UserDataTable)
        If (Not (Me.tableUser) Is Nothing) Then
            Me.tableUser.InitVars
        End If
    End Sub
    
    Private Sub InitClass()
        Me.DataSetName = "UserData"
        Me.Prefix = ""
        Me.Namespace = "http://www.tempuri.org/UserData.xsd"
        Me.Locale = New System.Globalization.CultureInfo("en-US")
        Me.CaseSensitive = false
        Me.EnforceConstraints = true
        Me.tableUser = New UserDataTable
        Me.Tables.Add(Me.tableUser)
    End Sub
    
    Private Function ShouldSerializeUser() As Boolean
        Return false
    End Function
    
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    Public Delegate Sub UserRowChangeEventHandler(ByVal sender As Object, ByVal e As UserRowChangeEvent)
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserDataTable
        Inherits DataTable
        Implements System.Collections.IEnumerable
        
        Private columnUserID As DataColumn
        
        Private columnLogin As DataColumn
        
        Private columnPassword As DataColumn
        
        Private columnFirstName As DataColumn
        
        Private columnLastName As DataColumn
        
        Private columnDateOfBirth As DataColumn
        
        Private columnPhoneNumber As DataColumn
        
        Private columnCellNumber As DataColumn
        
        Private columnAddress As DataColumn
        
        Private columnEmail As DataColumn
        
        Private columnIsAdministrator As DataColumn
        
        Friend Sub New()
            MyBase.New("User")
            Me.InitClass
        End Sub
        
        Friend Sub New(ByVal table As DataTable)
            MyBase.New(table.TableName)
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
            Me.DisplayExpression = table.DisplayExpression
        End Sub
        
        <System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        Friend ReadOnly Property UserIDColumn As DataColumn
            Get
                Return Me.columnUserID
            End Get
        End Property
        
        Friend ReadOnly Property LoginColumn As DataColumn
            Get
                Return Me.columnLogin
            End Get
        End Property
        
        Friend ReadOnly Property PasswordColumn As DataColumn
            Get
                Return Me.columnPassword
            End Get
        End Property
        
        Friend ReadOnly Property FirstNameColumn As DataColumn
            Get
                Return Me.columnFirstName
            End Get
        End Property
        
        Friend ReadOnly Property LastNameColumn As DataColumn
            Get
                Return Me.columnLastName
            End Get
        End Property
        
        Friend ReadOnly Property DateOfBirthColumn As DataColumn
            Get
                Return Me.columnDateOfBirth
            End Get
        End Property
        
        Friend ReadOnly Property PhoneNumberColumn As DataColumn
            Get
                Return Me.columnPhoneNumber
            End Get
        End Property
        
        Friend ReadOnly Property CellNumberColumn As DataColumn
            Get
                Return Me.columnCellNumber
            End Get
        End Property
        
        Friend ReadOnly Property AddressColumn As DataColumn
            Get
                Return Me.columnAddress
            End Get
        End Property
        
        Friend ReadOnly Property EmailColumn As DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        Friend ReadOnly Property IsAdministratorColumn As DataColumn
            Get
                Return Me.columnIsAdministrator
            End Get
        End Property
        
        Public Default ReadOnly Property Item(ByVal index As Integer) As UserRow
            Get
                Return CType(Me.Rows(index),UserRow)
            End Get
        End Property
        
        Public Event UserRowChanged As UserRowChangeEventHandler
        
        Public Event UserRowChanging As UserRowChangeEventHandler
        
        Public Event UserRowDeleted As UserRowChangeEventHandler
        
        Public Event UserRowDeleting As UserRowChangeEventHandler
        
        Public Overloads Sub AddUserRow(ByVal row As UserRow)
            Me.Rows.Add(row)
        End Sub
        
        Public Overloads Function AddUserRow(ByVal UserID As String, ByVal Login As String, ByVal Password As String, ByVal FirstName As String, ByVal LastName As String, ByVal DateOfBirth As Date, ByVal PhoneNumber As String, ByVal CellNumber As String, ByVal Address As String, ByVal Email As String, ByVal IsAdministrator As Boolean) As UserRow
            Dim rowUserRow As UserRow = CType(Me.NewRow,UserRow)
            rowUserRow.ItemArray = New Object() {UserID, Login, Password, FirstName, LastName, DateOfBirth, PhoneNumber, CellNumber, Address, Email, IsAdministrator}
            Me.Rows.Add(rowUserRow)
            Return rowUserRow
        End Function
        
        Public Function FindByUserID(ByVal UserID As String) As UserRow
            Return CType(Me.Rows.Find(New Object() {UserID}),UserRow)
        End Function
        
        Public Function GetEnumerator() As System.Collections.IEnumerator Implements System.Collections.IEnumerable.GetEnumerator
            Return Me.Rows.GetEnumerator
        End Function
        
        Public Overrides Function Clone() As DataTable
            Dim cln As UserDataTable = CType(MyBase.Clone,UserDataTable)
            cln.InitVars
            Return cln
        End Function
        
        Protected Overrides Function CreateInstance() As DataTable
            Return New UserDataTable
        End Function
        
        Friend Sub InitVars()
            Me.columnUserID = Me.Columns("UserID")
            Me.columnLogin = Me.Columns("Login")
            Me.columnPassword = Me.Columns("Password")
            Me.columnFirstName = Me.Columns("FirstName")
            Me.columnLastName = Me.Columns("LastName")
            Me.columnDateOfBirth = Me.Columns("DateOfBirth")
            Me.columnPhoneNumber = Me.Columns("PhoneNumber")
            Me.columnCellNumber = Me.Columns("CellNumber")
            Me.columnAddress = Me.Columns("Address")
            Me.columnEmail = Me.Columns("Email")
            Me.columnIsAdministrator = Me.Columns("IsAdministrator")
        End Sub
        
        Private Sub InitClass()
            Me.columnUserID = New DataColumn("UserID", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnUserID)
            Me.columnLogin = New DataColumn("Login", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLogin)
            Me.columnPassword = New DataColumn("Password", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPassword)
            Me.columnFirstName = New DataColumn("FirstName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnFirstName)
            Me.columnLastName = New DataColumn("LastName", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnLastName)
            Me.columnDateOfBirth = New DataColumn("DateOfBirth", GetType(System.DateTime), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnDateOfBirth)
            Me.columnPhoneNumber = New DataColumn("PhoneNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnPhoneNumber)
            Me.columnCellNumber = New DataColumn("CellNumber", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnCellNumber)
            Me.columnAddress = New DataColumn("Address", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnAddress)
            Me.columnEmail = New DataColumn("Email", GetType(System.String), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnEmail)
            Me.columnIsAdministrator = New DataColumn("IsAdministrator", GetType(System.Boolean), Nothing, System.Data.MappingType.Element)
            Me.Columns.Add(Me.columnIsAdministrator)
            Me.Constraints.Add(New UniqueConstraint("Constraint1", New DataColumn() {Me.columnUserID}, true))
            Me.columnUserID.AllowDBNull = false
            Me.columnUserID.Unique = true
            Me.columnLogin.AllowDBNull = false
            Me.columnPassword.AllowDBNull = false
            Me.columnFirstName.AllowDBNull = false
            Me.columnLastName.AllowDBNull = false
            Me.columnPhoneNumber.AllowDBNull = false
            Me.columnEmail.AllowDBNull = false
            Me.columnIsAdministrator.AllowDBNull = false
        End Sub
        
        Public Function NewUserRow() As UserRow
            Return CType(Me.NewRow,UserRow)
        End Function
        
        Protected Overrides Function NewRowFromBuilder(ByVal builder As DataRowBuilder) As DataRow
            Return New UserRow(builder)
        End Function
        
        Protected Overrides Function GetRowType() As System.Type
            Return GetType(UserRow)
        End Function
        
        Protected Overrides Sub OnRowChanged(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.UserRowChangedEvent) Is Nothing) Then
                RaiseEvent UserRowChanged(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowChanging(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.UserRowChangingEvent) Is Nothing) Then
                RaiseEvent UserRowChanging(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleted(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.UserRowDeletedEvent) Is Nothing) Then
                RaiseEvent UserRowDeleted(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
            End If
        End Sub
        
        Protected Overrides Sub OnRowDeleting(ByVal e As DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.UserRowDeletingEvent) Is Nothing) Then
                RaiseEvent UserRowDeleting(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
            End If
        End Sub
        
        Public Sub RemoveUserRow(ByVal row As UserRow)
            Me.Rows.Remove(row)
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserRow
        Inherits DataRow
        
        Private tableUser As UserDataTable
        
        Friend Sub New(ByVal rb As DataRowBuilder)
            MyBase.New(rb)
            Me.tableUser = CType(Me.Table,UserDataTable)
        End Sub
        
        Public Property UserID As String
            Get
                Return CType(Me(Me.tableUser.UserIDColumn),String)
            End Get
            Set
                Me(Me.tableUser.UserIDColumn) = value
            End Set
        End Property
        
        Public Property Login As String
            Get
                Return CType(Me(Me.tableUser.LoginColumn),String)
            End Get
            Set
                Me(Me.tableUser.LoginColumn) = value
            End Set
        End Property
        
        Public Property Password As String
            Get
                Return CType(Me(Me.tableUser.PasswordColumn),String)
            End Get
            Set
                Me(Me.tableUser.PasswordColumn) = value
            End Set
        End Property
        
        Public Property FirstName As String
            Get
                Return CType(Me(Me.tableUser.FirstNameColumn),String)
            End Get
            Set
                Me(Me.tableUser.FirstNameColumn) = value
            End Set
        End Property
        
        Public Property LastName As String
            Get
                Return CType(Me(Me.tableUser.LastNameColumn),String)
            End Get
            Set
                Me(Me.tableUser.LastNameColumn) = value
            End Set
        End Property
        
        Public Property DateOfBirth As Date
            Get
                Try 
                    Return CType(Me(Me.tableUser.DateOfBirthColumn),Date)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser.DateOfBirthColumn) = value
            End Set
        End Property
        
        Public Property PhoneNumber As String
            Get
                Return CType(Me(Me.tableUser.PhoneNumberColumn),String)
            End Get
            Set
                Me(Me.tableUser.PhoneNumberColumn) = value
            End Set
        End Property
        
        Public Property CellNumber As String
            Get
                Try 
                    Return CType(Me(Me.tableUser.CellNumberColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser.CellNumberColumn) = value
            End Set
        End Property
        
        Public Property Address As String
            Get
                Try 
                    Return CType(Me(Me.tableUser.AddressColumn),String)
                Catch e As InvalidCastException
                    Throw New StrongTypingException("Cannot get value because it is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableUser.AddressColumn) = value
            End Set
        End Property
        
        Public Property Email As String
            Get
                Return CType(Me(Me.tableUser.EmailColumn),String)
            End Get
            Set
                Me(Me.tableUser.EmailColumn) = value
            End Set
        End Property
        
        Public Property IsAdministrator As Boolean
            Get
                Return CType(Me(Me.tableUser.IsAdministratorColumn),Boolean)
            End Get
            Set
                Me(Me.tableUser.IsAdministratorColumn) = value
            End Set
        End Property
        
        Public Function IsDateOfBirthNull() As Boolean
            Return Me.IsNull(Me.tableUser.DateOfBirthColumn)
        End Function
        
        Public Sub SetDateOfBirthNull()
            Me(Me.tableUser.DateOfBirthColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsCellNumberNull() As Boolean
            Return Me.IsNull(Me.tableUser.CellNumberColumn)
        End Function
        
        Public Sub SetCellNumberNull()
            Me(Me.tableUser.CellNumberColumn) = System.Convert.DBNull
        End Sub
        
        Public Function IsAddressNull() As Boolean
            Return Me.IsNull(Me.tableUser.AddressColumn)
        End Function
        
        Public Sub SetAddressNull()
            Me(Me.tableUser.AddressColumn) = System.Convert.DBNull
        End Sub
    End Class
    
    <System.Diagnostics.DebuggerStepThrough()>  _
    Public Class UserRowChangeEvent
        Inherits EventArgs
        
        Private eventRow As UserRow
        
        Private eventAction As DataRowAction
        
        Public Sub New(ByVal row As UserRow, ByVal action As DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        Public ReadOnly Property Row As UserRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        Public ReadOnly Property Action As DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class
